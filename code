**Function usage practice

def f1(a,b,c=0,*args,**kwargs):
    print('a=',a,'b=',b,'c=',c,'args=',args,'kwargs=',kwargs)

def f2(a,b,c,d,*args):
    print('a=',a,'b=',b,'args=',args)

def product(*numbers):
    product = 1
    for number in numbers:
        product = product * number
    return  product


def trim(s):
    while s[0] == ' ':
        s = s[1:]
    while s[-1] == ' ':
        s = s[:-1]

    return s

def findMinAndMax(L):
    if len(L) == 0:
        return (None,None)
    else:
        max = L[0]
        min = L[0]
        for i in L:
            if i < max:
                max = max
            else:
                max = i

            if i < min:
                min = i
        return (min, max)

def triangles():
    L = [1]
    while True :
        yield L
        if len(L) < 2:
            L = [1,1]
        else:
            L = [L[i] + L[i+1] for i in range(len(L)-1)]
            L.append(1)
            L.insert(0,1)

n = 0
results = []
for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10:
        break
if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')
    
############################### map & reduce##############################


    def normalize(s):
    s = s.lower()
    L = s[0].upper()
    L = L + s[1:]

    return L



a = 'hello'
L1 = ['adam', 'LISA', 'barT']
b = a[0]
print(b)

print(normalize(a))

print(list(map(normalize,L1)))




from functools import  reduce
def product(l):
    return reduce(lambda x,y : x * y, l)


a = [1,2,3,4,5]
print(product(a))


###############################sorted##################################
def by_name(L):
    return L[0]

L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]

L_s = sorted(L,key=by_name)
print(L_s)


###############################decrator##################################
#!/usr/bin/env python3
#-*- coding: utf-8 -*-
'a test module'

__author__ = 'Tiger'


def metric(func):
    def wrap(*args,**kwargs):
        print('%s executed in %s ms' % (func.__name__, 10.24))
        return func(*args,**kwargs)
    return wrap


@metric
def now():
    print('now')



now()
import time
@metric
def fast(x, y):
    time.sleep(0.0012)
    return x + y;

@metric
def slow(x, y, z):
    time.sleep(0.1234)
    return x * y * z;

f = fast(11, 22)
s = slow(11, 22, 33)
if f != 33:
    print('测试失败!')
elif s != 7986:
    print('测试失败!')
    
####################################### class ######################################    
class Screen(object):

    @property
    def width(self):
        return self._width

    @width.setter
    def width(self,value):
        self._width = value


    @property
    def height(self):
        return self._height

    @height.setter
    def height(self,value):
        self._height = value

    @property
    def resolution(self):
        return self._width * self._height


s = Screen()
s.width = 1024
s.height = 768
print('resolution =', s.resolution)
if s.resolution == 786432:
    print('测试通过!')
else:
    print('测试失败!')
    
    
#####################################error handling#######################    
try:
    a = input()
    print('Try...')
    print(int(a))

except ValueError as e:
    print('ValueError',e)

finally:
    print('End')
